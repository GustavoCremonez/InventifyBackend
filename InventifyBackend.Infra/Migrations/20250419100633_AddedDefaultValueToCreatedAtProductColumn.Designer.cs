// <auto-generated />
using System;
using InventifyBackend.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InventifyBackend.Infra.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250419100633_AddedDefaultValueToCreatedAtProductColumn")]
    partial class AddedDefaultValueToCreatedAtProductColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InventifyBackend.Domain.Entity.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProductCategories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8aefbf51-6e4a-493b-b958-8f3128a9d684"),
                            CreatedAt = new DateTime(2025, 4, 19, 7, 6, 33, 121, DateTimeKind.Local).AddTicks(7248),
                            Description = "Produtos eletrônicos como computadores, smartphones, tablets, etc.",
                            Name = "Eletrônicos",
                            UpdatedAt = new DateTime(2025, 4, 19, 7, 6, 33, 121, DateTimeKind.Local).AddTicks(7263)
                        },
                        new
                        {
                            Id = new Guid("8baf5147-f65f-46d2-bf76-1dc38b709cc9"),
                            CreatedAt = new DateTime(2025, 4, 19, 7, 6, 33, 121, DateTimeKind.Local).AddTicks(7273),
                            Description = "Móveis para escritório, casa e jardim",
                            Name = "Móveis",
                            UpdatedAt = new DateTime(2025, 4, 19, 7, 6, 33, 121, DateTimeKind.Local).AddTicks(7273)
                        },
                        new
                        {
                            Id = new Guid("7e549120-e202-488f-ac57-a32a977cfd84"),
                            CreatedAt = new DateTime(2025, 4, 19, 7, 6, 33, 121, DateTimeKind.Local).AddTicks(7289),
                            Description = "Roupas, calçados e acessórios",
                            Name = "Vestuário",
                            UpdatedAt = new DateTime(2025, 4, 19, 7, 6, 33, 121, DateTimeKind.Local).AddTicks(7290)
                        },
                        new
                        {
                            Id = new Guid("e2463003-cef7-4836-bc87-483c6498d684"),
                            CreatedAt = new DateTime(2025, 4, 19, 7, 6, 33, 121, DateTimeKind.Local).AddTicks(7291),
                            Description = "Produtos alimentícios não perecíveis",
                            Name = "Alimentos",
                            UpdatedAt = new DateTime(2025, 4, 19, 7, 6, 33, 121, DateTimeKind.Local).AddTicks(7292)
                        },
                        new
                        {
                            Id = new Guid("29a89cf0-484e-48cc-acf4-c5cff596fe81"),
                            CreatedAt = new DateTime(2025, 4, 19, 7, 6, 33, 121, DateTimeKind.Local).AddTicks(7293),
                            Description = "Bebidas alcoólicas e não alcoólicas",
                            Name = "Bebidas",
                            UpdatedAt = new DateTime(2025, 4, 19, 7, 6, 33, 121, DateTimeKind.Local).AddTicks(7293)
                        },
                        new
                        {
                            Id = new Guid("a64c92a0-890f-4d15-ad48-4d856730febd"),
                            CreatedAt = new DateTime(2025, 4, 19, 7, 6, 33, 121, DateTimeKind.Local).AddTicks(7294),
                            Description = "Ferramentas manuais e elétricas",
                            Name = "Ferramentas",
                            UpdatedAt = new DateTime(2025, 4, 19, 7, 6, 33, 121, DateTimeKind.Local).AddTicks(7295)
                        },
                        new
                        {
                            Id = new Guid("0afa587d-314d-4ab4-aa5d-b5caaebfd600"),
                            CreatedAt = new DateTime(2025, 4, 19, 7, 6, 33, 121, DateTimeKind.Local).AddTicks(7296),
                            Description = "Suprimentos e equipamentos de escritório",
                            Name = "Material de Escritório",
                            UpdatedAt = new DateTime(2025, 4, 19, 7, 6, 33, 121, DateTimeKind.Local).AddTicks(7296)
                        },
                        new
                        {
                            Id = new Guid("5481c2c7-5c1a-4ad6-959d-63ca04759e68"),
                            CreatedAt = new DateTime(2025, 4, 19, 7, 6, 33, 121, DateTimeKind.Local).AddTicks(7297),
                            Description = "Produtos para limpeza doméstica e industrial",
                            Name = "Produtos de Limpeza",
                            UpdatedAt = new DateTime(2025, 4, 19, 7, 6, 33, 121, DateTimeKind.Local).AddTicks(7298)
                        },
                        new
                        {
                            Id = new Guid("e978a1e5-cec9-40ee-8567-a7f09c7b704b"),
                            CreatedAt = new DateTime(2025, 4, 19, 7, 6, 33, 121, DateTimeKind.Local).AddTicks(7299),
                            Description = "EPIs e equipamentos de segurança",
                            Name = "Equipamentos de Segurança",
                            UpdatedAt = new DateTime(2025, 4, 19, 7, 6, 33, 121, DateTimeKind.Local).AddTicks(7300)
                        },
                        new
                        {
                            Id = new Guid("ab0968a5-f181-41b1-b6d4-6ebc2bab46d7"),
                            CreatedAt = new DateTime(2025, 4, 19, 7, 6, 33, 121, DateTimeKind.Local).AddTicks(7301),
                            Description = "Peças e acessórios para veículos",
                            Name = "Peças Automotivas",
                            UpdatedAt = new DateTime(2025, 4, 19, 7, 6, 33, 121, DateTimeKind.Local).AddTicks(7301)
                        });
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories", (string)null);
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.Customer", b =>
                {
                    b.HasOne("InventifyBackend.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.Product", b =>
                {
                    b.HasOne("InventifyBackend.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.ProductCategory", b =>
                {
                    b.HasOne("InventifyBackend.Domain.Entity.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventifyBackend.Domain.Entity.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
