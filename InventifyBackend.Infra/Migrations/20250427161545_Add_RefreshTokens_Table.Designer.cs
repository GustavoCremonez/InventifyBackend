// <auto-generated />
using System;
using InventifyBackend.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InventifyBackend.Infra.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250427161545_Add_RefreshTokens_Table")]
    partial class Add_RefreshTokens_Table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InventifyBackend.Domain.Entity.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProductCategories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("134193b1-1866-46d5-a286-3b25dfac0282"),
                            CreatedAt = new DateTime(2025, 4, 27, 13, 15, 44, 376, DateTimeKind.Local).AddTicks(7521),
                            Description = "Produtos eletrônicos como computadores, smartphones, tablets, etc.",
                            Name = "Eletrônicos",
                            UpdatedAt = new DateTime(2025, 4, 27, 13, 15, 44, 376, DateTimeKind.Local).AddTicks(7530)
                        },
                        new
                        {
                            Id = new Guid("5fa39083-d4b2-4d36-ae92-c52a44638503"),
                            CreatedAt = new DateTime(2025, 4, 27, 13, 15, 44, 376, DateTimeKind.Local).AddTicks(7536),
                            Description = "Móveis para escritório, casa e jardim",
                            Name = "Móveis",
                            UpdatedAt = new DateTime(2025, 4, 27, 13, 15, 44, 376, DateTimeKind.Local).AddTicks(7537)
                        },
                        new
                        {
                            Id = new Guid("2b619531-7eb6-45a4-99af-c219a1c73c85"),
                            CreatedAt = new DateTime(2025, 4, 27, 13, 15, 44, 376, DateTimeKind.Local).AddTicks(7539),
                            Description = "Roupas, calçados e acessórios",
                            Name = "Vestuário",
                            UpdatedAt = new DateTime(2025, 4, 27, 13, 15, 44, 376, DateTimeKind.Local).AddTicks(7539)
                        },
                        new
                        {
                            Id = new Guid("f6891beb-8e5b-4fa5-9bba-df51e976b016"),
                            CreatedAt = new DateTime(2025, 4, 27, 13, 15, 44, 376, DateTimeKind.Local).AddTicks(7541),
                            Description = "Produtos alimentícios não perecíveis",
                            Name = "Alimentos",
                            UpdatedAt = new DateTime(2025, 4, 27, 13, 15, 44, 376, DateTimeKind.Local).AddTicks(7542)
                        },
                        new
                        {
                            Id = new Guid("e9748f94-9f60-4cf5-8834-f4df234af3b4"),
                            CreatedAt = new DateTime(2025, 4, 27, 13, 15, 44, 376, DateTimeKind.Local).AddTicks(7543),
                            Description = "Bebidas alcoólicas e não alcoólicas",
                            Name = "Bebidas",
                            UpdatedAt = new DateTime(2025, 4, 27, 13, 15, 44, 376, DateTimeKind.Local).AddTicks(7544)
                        },
                        new
                        {
                            Id = new Guid("fae86d7c-eb52-46ad-8a1c-f21f6b36aeaa"),
                            CreatedAt = new DateTime(2025, 4, 27, 13, 15, 44, 376, DateTimeKind.Local).AddTicks(7546),
                            Description = "Ferramentas manuais e elétricas",
                            Name = "Ferramentas",
                            UpdatedAt = new DateTime(2025, 4, 27, 13, 15, 44, 376, DateTimeKind.Local).AddTicks(7546)
                        },
                        new
                        {
                            Id = new Guid("b4e1d5d6-1fc2-4016-b7fc-7c1631329a1c"),
                            CreatedAt = new DateTime(2025, 4, 27, 13, 15, 44, 376, DateTimeKind.Local).AddTicks(7548),
                            Description = "Suprimentos e equipamentos de escritório",
                            Name = "Material de Escritório",
                            UpdatedAt = new DateTime(2025, 4, 27, 13, 15, 44, 376, DateTimeKind.Local).AddTicks(7549)
                        },
                        new
                        {
                            Id = new Guid("2092fcaf-e61e-4723-b5b1-a243af816466"),
                            CreatedAt = new DateTime(2025, 4, 27, 13, 15, 44, 376, DateTimeKind.Local).AddTicks(7562),
                            Description = "Produtos para limpeza doméstica e industrial",
                            Name = "Produtos de Limpeza",
                            UpdatedAt = new DateTime(2025, 4, 27, 13, 15, 44, 376, DateTimeKind.Local).AddTicks(7563)
                        },
                        new
                        {
                            Id = new Guid("ae738327-f557-4309-b2ef-95a8901a2b62"),
                            CreatedAt = new DateTime(2025, 4, 27, 13, 15, 44, 376, DateTimeKind.Local).AddTicks(7565),
                            Description = "EPIs e equipamentos de segurança",
                            Name = "Equipamentos de Segurança",
                            UpdatedAt = new DateTime(2025, 4, 27, 13, 15, 44, 376, DateTimeKind.Local).AddTicks(7565)
                        },
                        new
                        {
                            Id = new Guid("7180a654-3075-46cd-ac73-956499d1f7f5"),
                            CreatedAt = new DateTime(2025, 4, 27, 13, 15, 44, 376, DateTimeKind.Local).AddTicks(7567),
                            Description = "Peças e acessórios para veículos",
                            Name = "Peças Automotivas",
                            UpdatedAt = new DateTime(2025, 4, 27, 13, 15, 44, 376, DateTimeKind.Local).AddTicks(7568)
                        });
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories", (string)null);
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReplacedByToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.Customer", b =>
                {
                    b.HasOne("InventifyBackend.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.Product", b =>
                {
                    b.HasOne("InventifyBackend.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.ProductCategory", b =>
                {
                    b.HasOne("InventifyBackend.Domain.Entity.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventifyBackend.Domain.Entity.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.RefreshToken", b =>
                {
                    b.HasOne("InventifyBackend.Domain.Entity.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
