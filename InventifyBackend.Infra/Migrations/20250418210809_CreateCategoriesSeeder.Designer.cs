// <auto-generated />
using System;
using InventifyBackend.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InventifyBackend.Infra.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250418210809_CreateCategoriesSeeder")]
    partial class CreateCategoriesSeeder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InventifyBackend.Domain.Entity.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProductCategories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ff9bbf22-8f32-40f0-9cfe-5897198feecf"),
                            CreatedAt = new DateTime(2025, 4, 18, 18, 8, 8, 808, DateTimeKind.Local).AddTicks(5067),
                            Description = "Produtos eletrônicos como computadores, smartphones, tablets, etc.",
                            Name = "Eletrônicos",
                            UpdatedAt = new DateTime(2025, 4, 18, 18, 8, 8, 808, DateTimeKind.Local).AddTicks(5078)
                        },
                        new
                        {
                            Id = new Guid("76eb4cc0-4cc8-42ef-84e7-af5e0e960639"),
                            CreatedAt = new DateTime(2025, 4, 18, 18, 8, 8, 808, DateTimeKind.Local).AddTicks(5085),
                            Description = "Móveis para escritório, casa e jardim",
                            Name = "Móveis",
                            UpdatedAt = new DateTime(2025, 4, 18, 18, 8, 8, 808, DateTimeKind.Local).AddTicks(5085)
                        },
                        new
                        {
                            Id = new Guid("36ad6879-67cd-4d31-b9d4-774fe062450d"),
                            CreatedAt = new DateTime(2025, 4, 18, 18, 8, 8, 808, DateTimeKind.Local).AddTicks(5087),
                            Description = "Roupas, calçados e acessórios",
                            Name = "Vestuário",
                            UpdatedAt = new DateTime(2025, 4, 18, 18, 8, 8, 808, DateTimeKind.Local).AddTicks(5088)
                        },
                        new
                        {
                            Id = new Guid("b02b42d0-7fa7-4efc-a0d1-f74e1546db83"),
                            CreatedAt = new DateTime(2025, 4, 18, 18, 8, 8, 808, DateTimeKind.Local).AddTicks(5090),
                            Description = "Produtos alimentícios não perecíveis",
                            Name = "Alimentos",
                            UpdatedAt = new DateTime(2025, 4, 18, 18, 8, 8, 808, DateTimeKind.Local).AddTicks(5090)
                        },
                        new
                        {
                            Id = new Guid("aa48b776-5071-4878-9296-3f5eedc9b201"),
                            CreatedAt = new DateTime(2025, 4, 18, 18, 8, 8, 808, DateTimeKind.Local).AddTicks(5092),
                            Description = "Bebidas alcoólicas e não alcoólicas",
                            Name = "Bebidas",
                            UpdatedAt = new DateTime(2025, 4, 18, 18, 8, 8, 808, DateTimeKind.Local).AddTicks(5092)
                        },
                        new
                        {
                            Id = new Guid("91568401-81f4-49e3-9cb9-47ae5773725c"),
                            CreatedAt = new DateTime(2025, 4, 18, 18, 8, 8, 808, DateTimeKind.Local).AddTicks(5094),
                            Description = "Ferramentas manuais e elétricas",
                            Name = "Ferramentas",
                            UpdatedAt = new DateTime(2025, 4, 18, 18, 8, 8, 808, DateTimeKind.Local).AddTicks(5095)
                        },
                        new
                        {
                            Id = new Guid("3fabf9d2-7205-46a7-ab0c-192afa83917e"),
                            CreatedAt = new DateTime(2025, 4, 18, 18, 8, 8, 808, DateTimeKind.Local).AddTicks(5107),
                            Description = "Suprimentos e equipamentos de escritório",
                            Name = "Material de Escritório",
                            UpdatedAt = new DateTime(2025, 4, 18, 18, 8, 8, 808, DateTimeKind.Local).AddTicks(5108)
                        },
                        new
                        {
                            Id = new Guid("d76f1c94-9e33-41c8-9e26-9b3595817a49"),
                            CreatedAt = new DateTime(2025, 4, 18, 18, 8, 8, 808, DateTimeKind.Local).AddTicks(5110),
                            Description = "Produtos para limpeza doméstica e industrial",
                            Name = "Produtos de Limpeza",
                            UpdatedAt = new DateTime(2025, 4, 18, 18, 8, 8, 808, DateTimeKind.Local).AddTicks(5110)
                        },
                        new
                        {
                            Id = new Guid("cc931203-59b2-4738-a340-f0e1b3ca551d"),
                            CreatedAt = new DateTime(2025, 4, 18, 18, 8, 8, 808, DateTimeKind.Local).AddTicks(5112),
                            Description = "EPIs e equipamentos de segurança",
                            Name = "Equipamentos de Segurança",
                            UpdatedAt = new DateTime(2025, 4, 18, 18, 8, 8, 808, DateTimeKind.Local).AddTicks(5113)
                        },
                        new
                        {
                            Id = new Guid("4fe085ff-3165-4253-b37f-648fa56d3c60"),
                            CreatedAt = new DateTime(2025, 4, 18, 18, 8, 8, 808, DateTimeKind.Local).AddTicks(5115),
                            Description = "Peças e acessórios para veículos",
                            Name = "Peças Automotivas",
                            UpdatedAt = new DateTime(2025, 4, 18, 18, 8, 8, 808, DateTimeKind.Local).AddTicks(5115)
                        });
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductCategories")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories", (string)null);
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.Customer", b =>
                {
                    b.HasOne("InventifyBackend.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.Product", b =>
                {
                    b.HasOne("InventifyBackend.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.ProductCategory", b =>
                {
                    b.HasOne("InventifyBackend.Domain.Entity.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventifyBackend.Domain.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });
#pragma warning restore 612, 618
        }
    }
}
