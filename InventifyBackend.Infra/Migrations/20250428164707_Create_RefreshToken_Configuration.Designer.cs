// <auto-generated />
using System;
using InventifyBackend.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InventifyBackend.Infra.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250428164707_Create_RefreshToken_Configuration")]
    partial class Create_RefreshToken_Configuration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InventifyBackend.Domain.Entity.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProductCategories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b5822ce-4af9-4348-9b21-a4c303a2e52d"),
                            CreatedAt = new DateTime(2025, 4, 28, 13, 47, 6, 187, DateTimeKind.Local).AddTicks(6841),
                            Description = "Produtos eletrônicos como computadores, smartphones, tablets, etc.",
                            Name = "Eletrônicos",
                            UpdatedAt = new DateTime(2025, 4, 28, 13, 47, 6, 187, DateTimeKind.Local).AddTicks(6852)
                        },
                        new
                        {
                            Id = new Guid("2da11882-f833-49a0-a4ad-ed7542fb5ed4"),
                            CreatedAt = new DateTime(2025, 4, 28, 13, 47, 6, 187, DateTimeKind.Local).AddTicks(6858),
                            Description = "Móveis para escritório, casa e jardim",
                            Name = "Móveis",
                            UpdatedAt = new DateTime(2025, 4, 28, 13, 47, 6, 187, DateTimeKind.Local).AddTicks(6859)
                        },
                        new
                        {
                            Id = new Guid("705aeb8d-d276-4fec-8da2-23ad17e7e72b"),
                            CreatedAt = new DateTime(2025, 4, 28, 13, 47, 6, 187, DateTimeKind.Local).AddTicks(6863),
                            Description = "Roupas, calçados e acessórios",
                            Name = "Vestuário",
                            UpdatedAt = new DateTime(2025, 4, 28, 13, 47, 6, 187, DateTimeKind.Local).AddTicks(6864)
                        },
                        new
                        {
                            Id = new Guid("3b8e60bc-e9f1-4989-af1b-eac74da8557b"),
                            CreatedAt = new DateTime(2025, 4, 28, 13, 47, 6, 187, DateTimeKind.Local).AddTicks(6866),
                            Description = "Produtos alimentícios não perecíveis",
                            Name = "Alimentos",
                            UpdatedAt = new DateTime(2025, 4, 28, 13, 47, 6, 187, DateTimeKind.Local).AddTicks(6866)
                        },
                        new
                        {
                            Id = new Guid("b1772321-a941-46bb-8cf7-9abd74ec2697"),
                            CreatedAt = new DateTime(2025, 4, 28, 13, 47, 6, 187, DateTimeKind.Local).AddTicks(6868),
                            Description = "Bebidas alcoólicas e não alcoólicas",
                            Name = "Bebidas",
                            UpdatedAt = new DateTime(2025, 4, 28, 13, 47, 6, 187, DateTimeKind.Local).AddTicks(6869)
                        },
                        new
                        {
                            Id = new Guid("6112a428-ce92-4d29-a5b0-320f1f4a1279"),
                            CreatedAt = new DateTime(2025, 4, 28, 13, 47, 6, 187, DateTimeKind.Local).AddTicks(6881),
                            Description = "Ferramentas manuais e elétricas",
                            Name = "Ferramentas",
                            UpdatedAt = new DateTime(2025, 4, 28, 13, 47, 6, 187, DateTimeKind.Local).AddTicks(6881)
                        },
                        new
                        {
                            Id = new Guid("21726eb1-c243-4081-b862-08badd003f34"),
                            CreatedAt = new DateTime(2025, 4, 28, 13, 47, 6, 187, DateTimeKind.Local).AddTicks(6883),
                            Description = "Suprimentos e equipamentos de escritório",
                            Name = "Material de Escritório",
                            UpdatedAt = new DateTime(2025, 4, 28, 13, 47, 6, 187, DateTimeKind.Local).AddTicks(6884)
                        },
                        new
                        {
                            Id = new Guid("27f5b0ea-7826-441b-9ca7-715993d4d0f0"),
                            CreatedAt = new DateTime(2025, 4, 28, 13, 47, 6, 187, DateTimeKind.Local).AddTicks(6886),
                            Description = "Produtos para limpeza doméstica e industrial",
                            Name = "Produtos de Limpeza",
                            UpdatedAt = new DateTime(2025, 4, 28, 13, 47, 6, 187, DateTimeKind.Local).AddTicks(6886)
                        },
                        new
                        {
                            Id = new Guid("6765252a-a087-47f3-aabc-ff076889d1d9"),
                            CreatedAt = new DateTime(2025, 4, 28, 13, 47, 6, 187, DateTimeKind.Local).AddTicks(6888),
                            Description = "EPIs e equipamentos de segurança",
                            Name = "Equipamentos de Segurança",
                            UpdatedAt = new DateTime(2025, 4, 28, 13, 47, 6, 187, DateTimeKind.Local).AddTicks(6889)
                        },
                        new
                        {
                            Id = new Guid("252be656-59f1-4890-937b-aa226adff07c"),
                            CreatedAt = new DateTime(2025, 4, 28, 13, 47, 6, 187, DateTimeKind.Local).AddTicks(6891),
                            Description = "Peças e acessórios para veículos",
                            Name = "Peças Automotivas",
                            UpdatedAt = new DateTime(2025, 4, 28, 13, 47, 6, 187, DateTimeKind.Local).AddTicks(6891)
                        });
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories", (string)null);
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Expires");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.Customer", b =>
                {
                    b.HasOne("InventifyBackend.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.Product", b =>
                {
                    b.HasOne("InventifyBackend.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.ProductCategory", b =>
                {
                    b.HasOne("InventifyBackend.Domain.Entity.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventifyBackend.Domain.Entity.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.RefreshToken", b =>
                {
                    b.HasOne("InventifyBackend.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventifyBackend.Domain.Entity.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("InventifyBackend.Domain.Entity.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
